Project Plan:
- Jira EPICS -> Phases/Versions of product
- MVP (minimum viable product) -> one per EPIC/phase (gives direction, priorities)
- Risk Analysis -> assign a likely value and damage value for each risk; multiply them and  determine what is highest priority
- Jira is the "true" project plan because the plan will change and Jira is easier to adapt. The project plan doc is the first version.

Software Architecture ppt [for Agile]:
 - Start with the requirements you know. Invest in quality. Respond to change.
 - Start with a walking skeleton (just the bases). Then add the features needed for the mvp.
 - The walking skeleton doesn't need to be the final architecture, it just needs to connect the different parts.
 - 

C4 Model:
There are 4 standard diagrams and contexts you can describe your software in:
Level 1 aka Context - Integration with other systems, stuff that relates to your system. Does not need to be coding stuff.
Level 2 aka Containers - How we deploy/run our systems (FE, BE, DB), system containers
Level 3 aka Components - Components of our containers (controllers, packages, etc.);  commonly represented by Java packages or modules or "Themes"; you can see them in code
Level 4 aka Code - Class diagram but with less detail; just mention the classes and only when necessary because they can quickly become outdated; not recommended unless you have too, for 		example for a particularly complex piece of code like a recommendation algorithm java package
Notation - Add Titles; Layout is important; Aim for Visual Consistency (colors, position in layout); be careful of Acronyms (expertise and team specific); elements (start with simple colors, 	shapes and explicit specific text descriptions for consistency); write descriptions liberally but short; Key/legend for shapes, lines, colors; colors, shapes, icons, etc. should only 	to complement a diagram, it should still make sense without them.
The point of this is to make diagrams stand alone.
*Look at diagram for better visualization, each level is essentially a zoom in of the previous levels components
*We only have one diagram per level except for the 4th level; level 3 only represents the back-end


Sequence Diagrams:
Visualizing the flow of a certain application interaction
Useful for business logic
At least 1
https://www.websequencediagrams.com/app

SAD (Software Architecture Document):
- Justify your decisions for the future, is the decision still valid or will this new choice break everything
- Don't be too specific, you don't want to update it too many times
- Intro, C1, C2, C3, Sequence Diagrams for important parts
- Any decisions that break from the norm, and why